/**
 * {{contractName}} - Generated from COBOL Program {{programId}}
 * 
 * Original Program: {{programId}}
 * Author: {{author}}
 * Date Written: {{dateWritten}}
 * Generated: {{generatedAt}}
 * Banking System: {{bankingSystem}}
 * Complexity Score: {{complexity}}
 * 
 * Algorand Smart Contract (TEAL)
 * Optimized for CBDC and banking operations
 */

#pragma version 8

// Global state schema
// Derived from COBOL WORKING-STORAGE SECTION
{{#each variables}}
// {{originalName}} (PIC {{picture}}) -> {{type}}
{{/each}}

// Main application logic
main:
    // Check if this is an application call
    txn TypeEnum
    int appl
    ==
    bz end

    // Get the application call method
    txn ApplicationID
    int 0
    ==
    bnz create_app

    // Route to appropriate function based on application args
    txna ApplicationArgs 0
    method "execute()"
    ==
    bnz execute

    {{#each functions}}
    txna ApplicationArgs 0
    method "{{name}}()"
    ==
    bnz {{name}}_func
    {{/each}}

    // Default case - return error
    int 0
    return

// Application creation
create_app:
    // Initialize global state variables
    {{#each variables}}
    {{#if value}}
    byte "{{name}}"
    int {{value}}
    app_global_put
    {{/if}}
    {{/each}}
    
    int 1
    return

// Execute function - main COBOL logic
execute:
    {{#if functions}}
    {{#with functions.[0]}}
    {{#if operations}}
    {{#each operations}}
    {{#if_eq type 'compute'}}
    // COBOL COMPUTE: {{target}} = {{expression}}
    byte "{{target}}"
    {{expression}}
    app_global_put
    {{/if_eq}}
    
    {{#if_eq type 'conditional'}}
    // COBOL IF: {{condition}}
    {{condition}}
    bnz execute_true
    b execute_false
    
    execute_true:
        int 1
        b execute_end
    
    execute_false:
        int 0
        b execute_end
    
    execute_end:
    {{/if_eq}}
    {{/each}}
    {{/if}}
    {{/with}}
    {{/if}}
    
    int 1
    return

{{#each functions}}
{{#unless @first}}
// {{capitalize name}} function
{{name}}_func:
    {{#if operations}}
    {{#each operations}}
    {{#if_eq type 'compute'}}
    // COBOL COMPUTE: {{target}} = {{expression}}
    byte "{{target}}"
    {{expression}}
    app_global_put
    {{/if_eq}}
    {{/each}}
    {{/if}}
    
    int 1
    return
{{/unless}}
{{/each}}

// Banking-specific validations
validate_banking:
    {{#if_eq bankingSystem 'ALGORAND_CBDC'}}
    // CBDC-specific validations
    // Check minimum transaction amount
    byte "amount"
    app_global_get
    int 1
    >=
    assert
    {{/if_eq}}
    
    {{#if_eq bankingSystem 'FIS_SYSTEMATICS'}}
    // FIS Systematics validations
    // Validate account format (mainframe compatible)
    {{/if_eq}}
    
    int 1
    return

// Utility functions for banking operations
get_balance:
    byte "balance"
    app_global_get
    return

update_balance:
    // Get new balance from application args
    txna ApplicationArgs 1
    btoi
    
    // Validate positive amount
    dup
    int 0
    >
    assert
    
    // Update global state
    byte "balance"
    swap
    app_global_put
    
    int 1
    return

// CBDC-specific functions
mint_cbdc:
    // Only callable by authorized minter
    txn Sender
    global CreatorAddress
    ==
    assert
    
    // Get mint amount
    txna ApplicationArgs 1
    btoi
    
    // Update total supply
    byte "total_supply"
    app_global_get
    +
    
    byte "total_supply"
    swap
    app_global_put
    
    int 1
    return

burn_cbdc:
    // Get burn amount
    txna ApplicationArgs 1
    btoi
    
    // Check sufficient balance
    byte "balance"
    app_global_get
    dup2
    >=
    assert
    
    // Update balance
    -
    byte "balance"
    swap
    app_global_put
    
    int 1
    return

// Error handling
error:
    int 0
    return

// End of program
end:
    int 1
    return